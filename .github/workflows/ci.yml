name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          venv/
        key: ${{ runner.os }}-py3.12-${{ hashFiles('**/requirements.txt') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Wait for PostgreSQL
      run: |
        for i in {1..10}; do
          pg_isready -h localhost -p 5432 && break
          sleep 2
        done
    
    - name: Run migrations
      env:
        DATABASE_URL: postgresql+pg8000://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost/${{ secrets.POSTGRES_DB }}
      run: |
        alembic upgrade head
    
    - name: Run tests
      env:
        DATABASE_URL: postgresql+pg8000://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost/${{ secrets.POSTGRES_DB }}
      run: |
        mkdir -p reports
        pytest tests/ \
          --cov=controllers \
          --cov-report=xml:reports/coverage.xml \
          --junitxml=reports/junit.xml \
          -v
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: reports/

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    - name: Deploy application
      env:
        PROD_DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        echo "Add deployment commands here"